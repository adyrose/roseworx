@mixin removeButtonStyles
{
	appearance:none;
	background:none;
	outline:none;
	border:none;
	font-size:inherit;
	font:inherit;
	padding:0;
	color:inherit;
}

@mixin change-animated-border-bolor($from, $to)
{
	svg
	{
		rect
		{
			stroke: $from !important;
		}
	}
	&.active, &:hover, &:focus, &:active
	{
		svg rect {
			stroke: $to !important;
		}
	}
}

@mixin focus-ring
{
	outline:none;
	box-shadow: $focus-ring-shadow;
}

@mixin component-spacing($component: null)
{
	@if $component
	{
		h1, .h1, h2, .h2, h3, .h3, h4, .h4, h5, .h5, h6, .h6
		{
			+ .#{$component}
			{
				margin-top: 0px;
			}
		}
		.#{$component}
		{
			margin-top: $medium-spacing;
			margin-bottom: $medium-spacing;
		}
	}
}

@mixin change-input-color($color, $color2) {
	input,select
	{
		border:1px solid $color;
		color:$color;
	}
	label
	{
		color:$color;
	}
	&.rwx-select
	{
		select
		{
			background-image: icon('select-list', $color);
			option
			{
				color: $dark-grey;
			}
		}
	}
	&.rwx-checkbox
	{
		input[type="checkbox"]
		{
			border: 1px solid $color;
			&:checked
			{
				background-image: icon('tick', $color);
			}
		}
		label:after
		{
			border-color:$color;
		}
	}
	&.rwx-toggle
	{
		input[type="checkbox"]
		{
			background-image: icon('circle', $color, $color);
			&:checked
			{
				background-position: right;
				background-image: icon('circle', $color2, $color2);
			}
		}
	}
	&.rwx-radio
	{
		input[type="radio"]
		{
			background-image: icon('circle', $color2, $color2);			
		}
	}
}

@mixin change-link-color($color) {
	color:$color !important;
	&:after
	{
		background-color:$color !important;
	}
}

@mixin flex-center
{
	display:flex;
	justify-content:center;
	align-items:center;
}

@mixin absolute-center
{
	position:absolute;
	top:50%;
	left:50%;
	transform:translate(-50%,-50%);
}

@mixin full-size
{
	position:absolute;
	top:0px;
	right:0px;
	left:0px;
	bottom:0px;
	height:100%;
	width:100%;
}

@mixin snap-down-from($breakpoint) {
	@if map-has-key($breakpoints, $breakpoint) {
		@media (max-width: map-get($breakpoints, $breakpoint)) {
			@content;
		}
	}
	@else {
		@warn "`#{$breakpoint} is not a valid breakpoint. Available breakpoints are: #{map-keys($breakpoints)}`"
	}
}

@mixin snap-up-from($breakpoint) {
	@if map-has-key($breakpoints, $breakpoint) {
		@media (min-width: map-get($breakpoints, $breakpoint)) {
			@content;
		}
	}
	@else {
		@warn "`#{$breakpoint} is not a valid breakpoint. Available breakpoints are: #{map-keys($breakpoints)}`"
	}
}